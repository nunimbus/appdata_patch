--- ../../../../../../../../../../lib/private/Files/AppData/AppData.php	2022-11-03 06:14:30.000000000 -0500
+++ AppData.php	2023-01-10 12:28:35.914000000 -0600
@@ -34,18 +34,20 @@
 use OCP\Files\IRootFolder;
 use OCP\Files\Node;
 use OCP\Files\NotFoundException;
 use OCP\Files\NotPermittedException;
 use OCP\Files\SimpleFS\ISimpleFolder;
+use OCP\Files\Storage\IStorageFactory;
 
 class AppData implements IAppData {
 	private IRootFolder $rootFolder;
 	private SystemConfig $config;
 	private string $appId;
 	private ?Folder $folder = null;
 	/** @var CappedMemoryCache<ISimpleFolder|NotFoundException> */
 	private CappedMemoryCache $folders;
+	private $customRoot = false;
 
 	/**
 	 * AppData constructor.
 	 *
 	 * @param IRootFolder $rootFolder
@@ -57,10 +59,29 @@
 								string $appId) {
 		$this->rootFolder = $rootFolder;
 		$this->config = $systemConfig;
 		$this->appId = $appId;
 		$this->folders = new CappedMemoryCache();
+
+		if (in_array('appdataroot',\OC::$server->getSystemConfig()->getKeys())) {	
+			// This is the actual filesystem location where the `appdata_` folder will be stored	
+			$arguments = [
+				'datadir' => \OC::$server->getSystemConfig()->getValue('appdataroot'),
+			];
+
+			// Create a custom mount point to be used for the appdata folder root. This mount point is relative to the
+			// internal NC root folder `/`
+			$storage = new \OC\Files\Storage\LocalRootStorage($arguments);
+			$loader = \OC::$server->query(IStorageFactory::class);
+			$mount = new \OC\Files\Mount\MountPoint($storage, "/appdataroot/", $arguments, $loader);
+			\OC::$server->getMountManager()->addMount($mount);
+
+			// It would be nice to do `$this->rootFolder = $rootFolder->get('/appdataroot/')`, but this this would lead
+			// to a recursive segfault - this class' constructor is called as part of constructing the `IRootFolder`
+			// itself. Thus, a boolean is set, and the root folder is loaded appropriately in each function below.
+			$this->customRoot = true;
+		}
 	}
 
 	private function getAppDataFolderName() {
 		$instanceId = $this->config->getValue('instanceid', null);
 		if ($instanceId === null) {
@@ -69,19 +90,20 @@
 
 		return 'appdata_' . $instanceId;
 	}
 
 	protected function getAppDataRootFolder(): Folder {
+		$rootFolder = $this->customRoot ? $this->rootFolder->get('/appdataroot/') : $this->rootFolder;
 		$name = $this->getAppDataFolderName();
 
 		try {
 			/** @var Folder $node */
-			$node = $this->rootFolder->get($name);
+			$node = $rootFolder->get($name);
 			return $node;
 		} catch (NotFoundException $e) {
 			try {
-				return $this->rootFolder->newFolder($name);
+				return $rootFolder->newFolder($name);
 			} catch (NotPermittedException $e) {
 				throw new \RuntimeException('Could not get appdata folder');
 			}
 		}
 	}
@@ -89,15 +111,16 @@
 	/**
 	 * @return Folder
 	 * @throws \RuntimeException
 	 */
 	private function getAppDataFolder(): Folder {
+		$rootFolder = $this->customRoot ? $this->rootFolder->get('/appdataroot/') : $this->rootFolder;
 		if ($this->folder === null) {
 			$name = $this->getAppDataFolderName();
 
 			try {
-				$this->folder = $this->rootFolder->get($name . '/' . $this->appId);
+				$this->folder = $rootFolder->get($name . '/' . $this->appId);
 			} catch (NotFoundException $e) {
 				$appDataRootFolder = $this->getAppDataRootFolder();
 
 				try {
 					$this->folder = $appDataRootFolder->get($this->appId);
@@ -113,10 +136,11 @@
 
 		return $this->folder;
 	}
 
 	public function getFolder(string $name): ISimpleFolder {
+		$rootFolder = $this->customRoot ? $this->rootFolder->get('/appdataroot/') : $this->rootFolder;
 		$key = $this->appId . '/' . $name;
 		if ($cachedFolder = $this->folders->get($key)) {
 			if ($cachedFolder instanceof \Exception) {
 				throw $cachedFolder;
 			} else {
@@ -127,11 +151,11 @@
 			// Hardening if somebody wants to retrieve '/'
 			if ($name === '/') {
 				$node = $this->getAppDataFolder();
 			} else {
 				$path = $this->getAppDataFolderName() . '/' . $this->appId . '/' . $name;
-				$node = $this->rootFolder->get($path);
+				$node = $rootFolder->get($path);
 			}
 		} catch (NotFoundException $e) {
 			$this->folders->set($key, $e);
 			throw $e;
 		}
@@ -167,6 +191,6 @@
 	}
 
 	public function getId(): int {
 		return $this->getAppDataFolder()->getId();
 	}
-}
+}
\ No newline at end of file
